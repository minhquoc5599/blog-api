@model PagingBaseResponse
@{
	var url = Url.Action() + "?page={0}";
	var request = ViewContext.HttpContext.Request;
	foreach (var key in request.Query.Keys)
	{
		if (key == "page")
		{
			continue;
		}
		if (request.Query[key].Count > 1)
		{
			foreach (var item in (string[])request.Query[key])
			{
				url += "&" + key + "=" + item;
			}
		}
		else
		{
			url += "&" + key + "=" + request.Query[key];
		}
	}
	var previousIndex = Model.CurrentPage > 1 ? Model.CurrentPage - 1 : -1;
	var nextIndex = Model.CurrentPage < Model.PageCount ? Model.CurrentPage + 1 : -1;
}
@if (Model.PageCount > 0)
{
	<nav>
		<ul class="pagination justify-content-center">
			<li class="page-item @(Model.CurrentPage == 1 ? "d-none": "")">
				<a class="page-link" href="@url.Replace("{0}", "1")">First</a>
			</li>
			<li class="page-item @(previousIndex == -1 ? "d-none": "")">
				<a class="page-link" href="@url.Replace("{0}", previousIndex.ToString())">Previous</a>
			</li>

			@for (var i = 1; i <= Model.PageCount; i++)
			{
				<li class="page-item @(Model.CurrentPage == i ? "active": "")" aria-current="page">
					<a class="page-link"
					   href="@(Model.CurrentPage !=i ? url.Replace("{0}", i.ToString()) : "javascript:")"
					   title="Page @i.ToString()">@i</a>
				</li>
			}

			<li class="page-itemv @(nextIndex == -1 ? "d-none": "")">
				<a class="page-link" href="@url.Replace("{0}", nextIndex.ToString())">Next</a>
			</li>
			<li class="page-itemv @(Model.CurrentPage == Model.PageCount ? "d-none": "")">
				<a class="page-link" href="@url.Replace("{0}", Model.PageCount.ToString())">Last</a>
			</li>
		</ul>
	</nav>
}
